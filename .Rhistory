list(set = set, get = get,
setSD = setSD,
getSD = getSD)
}
makeSD <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSD <- function(sd) m <<- sd
getSD <- function() m
list(set = set, get = get,
setSD = setSD,
getSD = getSD)
}
x <- c(1,2,3)
sd(x)
makeSD
z <- c(1,2,3)
sd(z)
makeSD <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSD <- function(sd) m <<- sd
getSD <- function() m
list(set = set, get = get,
setSD = setSD,
getSD = getSD)
}
makeSD
makeSD(z)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
z <- c(1,2,3)
makeVector(z)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(z)
cachemean <- function(x, z) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, z)
x$setmean(m)
m
}
cachemean(z)
cachemean <- function(x, makeVector) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, makeVector)
x$setmean(m)
m
}
cachemean(z)
makeVector(z)
a <- makeVector(z)
a
a$get
a$x
a$y
a$getmean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x<- c(1,2,3)
makeVector(x)
m<- c(1,2,3)
makeVector(1,2,3)
makeVector(m)
y<- c(1,2,3)
makeVector(y)
makeVector$get
makeVector$setmean
class(makeVector)
getmean <- makeVector(z)
getmean
twosam <- function(y1, y2) {
n1  <- length(y1); n2  <- length(y2)
yb1 <- mean(y1);   yb2 <- mean(y2)
s1  <- var(y1);    s2  <- var(y2)
s <- ((n1-1)*s1 + (n2-1)*s2)/(n1+n2-2)
tst <- (yb1 - yb2)/sqrt(s*(1/n1 + 1/n2))
tst
}
e <- c(1,2,3)
r <- c(1,2,3)
tstat <- twosam(e,r); tstat
z
getmean <- makeVector(z)
getmean
getmean <- makeVector(z); getmean
class(z)
getmean <- makeVector(z)
getmean
makeVector$getmean
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m
getmean(m)
makeVector$m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
y <- c(1,2,3,4,5)
y
z <- makeVector(y)
z
z$set
x <- c(1,2,3,4,5)
z <- makeVector(x)
z
z$m
z$getmean
makeVector(1,2,3,4,5)
makeVector(1)
makeVector <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- c(1,2,3,4,5)
x <- c(1,2,3,4,5)
class(x)
makeVector(x)
m <- mean(x)
m
makeVector(x, m)
makeVector(m)
makeVector()
makeVector <- function(x = numeric(1,2,3,4,5)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector)
makeVector(x = z)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
setmean <- mean(set)
set <- c(1,2,3)
setmean <- mean(set)
makeVector(set)
makeVector(setmean)
y <- c(1,2,3)
makeVector(setmean)
z <- c(1,2,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- makeVector(z)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(z)
cachemean(x)
z <- c(1,2,3,4)
z <- c(1,2,3,4,5)
x <- makeVector(z)
cachemean(x)
cachemean(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
z <- matrix(c(1,2,3,4),2)
z
z <- matrix(c(1,3,2,4),2)
z
solve(z)
z <- matrix(c(1,2,3,4),2)
solve(z)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
g <- makeCacheMatrix(z)
cacheSolve(g)
cacheSolve(g)
cacheSolve(g)
cachemean(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
z <- matrix(c(1,2,3,4),2)
g <- makeCacheMatrix(z)
cacheSolve(g)
x <- makeCacheMatrix(z)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
z <- matrix(c(1,2,3,4),2)
x <- makeCacheMatrix(z)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <-- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
z <- matrix(c(1,2,3,4),2)
x <- makeCacheMatrix(z)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <<- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
